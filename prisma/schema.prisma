datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id         String   @id @default(uuid())
  email      String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  photoCount Int      @default(0)
  role       String   @default("user")
  limit      Int      @default(2)
  isBlocked  Boolean  @default(false) // ðŸ”¥ New field
  photos     Photo[]
  likes      Like[] // Add likes relation
  followers  Follow[] @relation("followers")
  following  Follow[] @relation("following")
}

model OTP {
  id        String   @id @default(uuid())
  email     String   @unique
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model Photo {
  id            String   @id @default(uuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  driveId       String
  messageId     Int // ðŸ”¥ Add this field
  link          String
  caption       String?
  isBlocked     Boolean  @default(false)
  blockedReason String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  likes         Like[] // Add likes relation
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)
  photoId   String
  createdAt DateTime @default(now())

  @@unique([userId, photoId]) // prevent duplicate likes
}

model Follow {
  id String @id @default(uuid())

  follower   User   @relation("following", fields: [followerId], references: [id])
  followerId String

  following   User   @relation("followers", fields: [followingId], references: [id])
  followingId String

  createdAt DateTime @default(now())

  @@unique([followerId, followingId]) // prevents duplicate follows
}
